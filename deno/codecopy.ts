import { merge } from "lume/core/utils.ts";

import type { Page, Site } from "lume/core.ts";

export interface BuildOptions {
    buildDir: string;
}

export interface ButtonStylesOptions {
    top: string;
    right: string;
    width: string;
    height: string;
    padding: string;
    background: string;
    backgroundHovered: string;
    border: string;
    outline: string;
    fontSize: string;
    fontWeight: string;
    color: string;
    opacity: string;
    transition: string;
}

export interface ResultStylesOptions {
    top: string;
    right: string;
    opacity: string;
    fontSize: string;
    fontStyle: string;
    fontWeight: string;
    color: string;
    pointerEvents: string;
    transition: string;
}

export interface UIOptions {
    buttonText: string;
    buttonStyles: Partial<ButtonStylesOptions>;
    resultText: string;
    resultStyles: Partial<ResultStylesOptions>;
    resultTime: number;
}

export interface Options {
    build: BuildOptions;
    ui: UIOptions;
}

const defaults: Options = {
    build: {
        buildDir: "codecopy",
    },
    ui: {
        buttonText: "Copy",
        buttonStyles: {
            top: "0",
            right: "0",
            width: "64px",
            height: "32px",
            padding: "8px 16px",
            background: "#555585",
            backgroundHovered: "#8888c8",
            border: "none",
            outline: "none",
            fontSize: "0.85em",
            fontWeight: "bold",
            color: "#efefef",
            opacity: "0",
            transition: "0.1s",
        },
        resultText: "Copied!",
        resultStyles: {
            top: "-30px",
            right: "10px",
            opacity: "0",
            fontSize: "1.1em",
            fontStyle: "italic",
            fontWeight: "bold",
            color: "#12efb5",
            pointerEvents: "none",
            transition: "0.1s",
        },
        resultTime: 2000,
    },
};

export default function (userOptions?: Partial<Options>) {
    const options = merge(defaults, userOptions);

    return (site: Site) => {
        const { build, ui } = options;
        const codecopyDir = site.dest() + "/" + build.buildDir;

        site.process([".html"], (page) => {
            addCopyElem(page);
        });

        site.addEventListener("afterBuild", async () => {
            const encoder = new TextEncoder();

            // Create a directory for codecopy
            await Deno.mkdir(`${codecopyDir}`);

            // Create codecopy.css
            const cssCode = `/* The css file generate by the codecopy plugin. */
.codecopy_pre {
    position: relative;
}
.codecopy_pre:hover .codecopy_copy {
    opacity: 1;
}

.codecopy_copy {
    box-sizing: border-box;
    position: absolute;
    top: ${ui.buttonStyles.top};
    right: ${ui.buttonStyles.right};
    width: ${ui.buttonStyles.width};
    height: ${ui.buttonStyles.height};
    padding: ${ui.buttonStyles.padding};
    background: ${ui.buttonStyles.background};
    border: ${ui.buttonStyles.border};
    outline: ${ui.buttonStyles.outline};
    font-size: ${ui.buttonStyles.fontSize};
    font-weight: ${ui.buttonStyles.fontWeight};
    color: ${ui.buttonStyles.color};
    cursor: pointer;
    opacity: ${ui.buttonStyles.opacity};
    transition: ${ui.buttonStyles.transition};
}
.codecopy_copy:hover {
    background: ${ui.buttonStyles.backgroundHovered};
}

.codecopy_result {
    position: absolute;
    top: ${ui.resultStyles.top};
    right: ${ui.resultStyles.right};
    opacity: ${ui.resultStyles.opacity};
    font-size: ${ui.resultStyles.fontSize};
    font-style: ${ui.resultStyles.fontStyle};
    font-weight: ${ui.resultStyles.fontWeight};
    color: ${ui.resultStyles.color};
    pointer-events: ${ui.resultStyles.pointerEvents};
    transition: ${ui.resultStyles.transition};
}`;

            const dataCSS = encoder.encode(cssCode);
            await Deno.writeFile(`${codecopyDir}/codecopy.css`, dataCSS);

            // Create codecopy.js
            const jsCode = `// The javascript file generated by the codecopy plugin.
document.addEventListener('DOMContentLoaded', () => {
    const copyElems = document.querySelectorAll(".codecopy_copy");
    [].forEach.call(copyElems, (copyElem) => {
        const idx = copyElem.getAttribute("data-codecopy");
        copyElem.addEventListener("click", () => {
            const preElem = document.querySelector(".codecopy_pre_" + idx);
            const codeElem = preElem.getElementsByTagName("code")[0];
            navigator.clipboard.writeText(codeElem.innerText);
            // Display result text.
            const copiedElem = copyElem.querySelector(".codecopy_result");
            copiedElem.style.opacity = "1";
            setTimeout(() => {
                copiedElem.style.opacity = "0";
            }, ${ui.resultTime});
        });
    });
});`;
            const dataJS = encoder.encode(jsCode);
            await Deno.writeFile(`${codecopyDir}/codecopy.js`, dataJS);
        });
        
        function addCopyElem(page: Page) {
            const { document } = page;
            if (!document) {
                return;
            }
            const headElem = document.head;
            const pres = document.getElementsByTagName("pre");
            
            Array.from(pres).forEach((pre: any, idx: number) => {
                pre.classList.add("codecopy_pre");
                pre.classList.add(`codecopy_pre_${idx}`);
                
                const copyElem = document.createElement("button");
                copyElem.classList.add("codecopy_copy");
                copyElem.setAttribute("data-codecopy", idx);
                copyElem.innerText = ui.buttonText;
    
                const copiedText = document.createElement("span");
                copiedText.classList.add("codecopy_result");
                copiedText.innerText = ui.resultText;
    
                copyElem.appendChild(copiedText);
                pre.appendChild(copyElem);
            });
    
            // Add a link tag which loads codecopy.css
            const linkElem = document.createElement("link");
            linkElem.setAttribute("rel", "stylesheet");
            linkElem.setAttribute("href", "/codecopy/codecopy.css");
            headElem.appendChild(linkElem);
            
            // Add a script tag which load codecopy.js
            const scriptElem = document.createElement("script");
            scriptElem.setAttribute("type", "text/javascript");
            scriptElem.setAttribute("src", `/codecopy/codecopy.js`);
            headElem.appendChild(scriptElem);
        }
    }

}